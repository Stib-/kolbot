/* 

[Item-parser Syntax Information] 

1. [Keyword] separates into two groups 
   - [Property Keywords] : [Type], [Name], [Class], [Quality], [Flag], [Level], [Prefix], [Suffix] 
   - [Stat Keywords] : [Number or Alias] 

2. [Keyword] must be surrounded by '[' and ']' 

3. [Property Keywords] must be placed first 

4. Insert '#' symbol between [Property Keywords] and [Stat Keywords] 

5. Use '+', '-', '*', '/', '(', ')', '&&', '||', '>', '>=', '<', '<=', '==', '!=' symbols for comparison 

6. Use '//' symbol for comment 

*/

include("NTItemAlias.dbl"); 

var _NTIP_CheckList = new Array(); 

function NTIPOpenFile(filepath) 
{
	var _nipfile; 
	var _line; 

	_nipfile = File.open(filepath, 0); 

	if(!_nipfile) 
		return false; 

	while(!_nipfile.eof) 
	{
		_line = NTIPParseLineInt(_nipfile.readLine()); 

		if(_line) 
			_NTIP_CheckList.push(_line); 
	}

	_nipfile.close(); 

	return true; 
}

function NTIPCheckItem(item, list)
{
	if (!list) {
		list = _NTIP_CheckList;
	}

	var i; 
	var _identified; 
	var _result = 0; 

	_identified = item.getFlag(0x10);

	for(i = 0 ; i < list.length ; i++) 
	{
		if(list[i][0].length > 0) 
		{
			if(eval(list[i][0])) 
			{
				if(list[i][1].length > 0) 
				{
					if(eval(list[i][1])) 
					{
						if(list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) 
						{
							if(NTIP_CheckQuantityOwned(list[i][0],list[i][1], false) < list[i][2]["MaxQuantity"]) 
							{
								//print("I need more of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)); 
								return 1; 
							}
							else 
							{
								//print("I already have enough of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)+" in my stash!"); 
								return 0; 
							}
						}
						else 
						{
							//print("No maximum for this item"); 
							return 1; 
						}
					}
					else if(!_identified && _result == 0) 
						_result = -1;
				}
				else 
				{
					if(list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) 
					{
						if(NTIP_CheckQuantityOwned(list[i][0], null, false) < list[i][2]["MaxQuantity"]) 
						{
							//print("I need more of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)); 
							return 1; 
						}
						else 
						{
							//print("I already have enough of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)+" in my stash!"); 
							return 0; 
						}
					}
					else 
					{
						//print("No maximum for this item"); 
						return 1; 
					}
				}
			}
		}
		else if(list[i][1].length > 0) 
		{
			if(eval(list[i][1])) 
			{
				if(list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) 
				{
					if(NTIP_CheckQuantityOwned(null, list[i][1], false) < list[i][2]["MaxQuantity"]) 
					{
						//print("I need more of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)); 
						return 1; 
					}
					else 
					{
						//print("I already have enough of these "+NTC_ItemQualityToMGRColor[item.quality] + item.itemdesc.split("\n")[0].substring(3)+" in my stash!"); 
						return 0; 
					}
				}
				else 
				{
					return 1; 
				}
			}
			else if(!_identified && _result == 0) 
				_result = -1; 
		}
	}

	return _result; 
}

// Internal function 
function NTIP_CheckQuantityOwned(item_type, item_stats, check_inventory_too) 
{
	var _nb = 0; 
	var _items = me.getItems(); 
	if (!_items)
	{
		print("I can't find my items!"); 
		return 0; 
	}
	for(var i = 0 ; i < _items.length ; i++) 
	{
		if(_items[i].mode == 0 && _items[i].location == 7) 
		{
			var item = _items[i]; 
			if((item_type != null && item_type.length > 0 && eval(item_type)) || item_type == null) 
				if((item_stats != null && item_stats.length > 0 && eval(item_stats)) || item_stats == null) 
					_nb++; 
		}
		else if(check_inventory_too && _items[i].mode == 0 && _items[i].location == 3) 
		{
			var item = _items[i]; 
			if((item_type != null && item_type.length > 0 && eval(item_type)) || item_type == null) 
				if((item_stats != null && item_stats.length > 0 && eval(item_stats)) || item_stats == null) 
					if(Config.Inventory[_items[i].y][_items[i].x] > 0) // we check only space that is supposed to be free 
						_nb++; 
		}
	}
	//print("I have "+_nb+" of these."); 
	return _nb; 
}

function NTIPParseLineInt(input) 
{
	var i; 
	var _start, _end; 
	var _section, _keyword; 
	var _result; 

	_end = input.indexOf("//"); 
	if(_end != -1) 
		input = input.substring(0, _end); 

	input = input.replace(/ |;|\t/g, "").toLowerCase();

	if(input.length < 5) 
		return null; 

	_result = input.split("#"); 

	if(_result[0] && _result[0].length > 4) 
	{
		_section = _result[0].split("["); 

		_result[0] = _section[0]; 

		for(i = 1 ; i < _section.length ; i++) 
		{
			_end = _section[i].indexOf("]") + 1; 

			switch(_section[i][0]) 
			{
			case 't': 
				_result[0] += "item.itemType"; 
				break; 
			case 'n': 
				_result[0] += "item.classid"; 
				break; 
			case 'c': 
				_result[0] += "item.itemclass"; 
				break; 
			case 'q': 
				_result[0] += "item.quality"; 
				break; 
			case 'f':
				if(_section[i][_end] == '!') 
					_result[0] += "!item.getFlag("; 
				else 
					_result[0] += "item.getFlag("; 

				_end += 2;

				break;
			case 'l': 
				_result[0] += "item.ilvl"; 
				break; 
			case 'p': 
				//_result[0] += "item.prefixnum"; 
				if(_section[i][_end] == '!') 
					_result[0] += "!item.getPrefix("; 
				else 
					_result[0] += "item.getPrefix("; 

				_end += 2;

				break;
			case 's': 
				//_result[0] += "item.suffixnum"; 
				if(_section[i][_end] == '!') 
					_result[0] += "!item.getSuffix("; 
				else 
					_result[0] += "item.getSuffix("; 

				_end += 2;

				break;
			default: 
				print("Unknown Keyword : " + input); 
				break; 
			}

			for(_start = _end ; _end < _section[i].length ; _end++) 
			{
				if(!NTIPIsSyntaxInt(_section[i][_end])) 
					break; 
			}

			_result[0] += _section[i].substring(_start, _end); 

			for(_start = _end ; _end < _section[i].length ; _end++) 
			{
				if(NTIPIsSyntaxInt(_section[i][_end])) 
					break; 
			}

			_keyword = _section[i].substring(_start, _end); 

			if(isNaN(_keyword)) 
			{
				switch(_section[i][0]) 
				{
				case 't': 
					_result[0] += _NTIPAliasType[_keyword]; 
					break; 
				case 'n': 
					_result[0] += _NTIPAliasClassID[_keyword]; 
					break; 
				case 'c': 
					_result[0] += _NTIPAliasClass[_keyword]; 
					break; 
				case 'q': 
					_result[0] += _NTIPAliasQuality[_keyword]; 
					break; 
				case 'f': 
					_result[0] += _NTIPAliasFlag[_keyword] + ")"; 
					break; 
				}
			}
			else 
			{
				if(_section[i][0] == 'f' || _section[i][0] == 'p' || _section[i][0] == 's')
					_result[0] += _keyword + ")"; 
				else 
					_result[0] += _keyword; 
			}

			_result[0] += _section[i].substring(_end); 
		}
	}
	else 
		_result[0] = ""; 

	if(_result[1] && _result[1].length > 4) 
	{
		_section = _result[1].split("["); 
		_result[1] = _section[0]; 

		for(i = 1 ; i < _section.length ; i++) 
		{
			_end = _section[i].indexOf("]"); 
			_keyword = _section[i].substring(0, _end); 

			if(_keyword == "description")
			{
				var _string = _section[i].split("\"")[1];
				_result[1] += "item.location == 3 && ";
				_result[1] += "item.description.replace(/ |;|\t/g, \"\").toLowerCase().indexOf(\"" + _string + "\") > -1";
				_result[1] += _section[i].split("\"")[2];
			}
			else
			{
				if(isNaN(_keyword)) 
					_result[1] += "item.getStat(" + _NTIPAliasStat[_keyword] + ")"; 
				else 
					_result[1] += "item.getStat(" + _keyword + ")"; 

				_result[1] += _section[i].substring(_end+1); 
			}
		}
	}
	else 
		_result[1] = ""; 

	if(_result[2] && _result[2].replace(/^\s+|\s+$/, "").length > 0) 
	{
		_section = _result[2].split("["); 
		_result[2] = new Array(); 

		for(i = 1 ; i < _section.length ; i++) 
		{
			_end = _section[i].indexOf("]"); 

			_keyword = _section[i].substring(0, _end); 

			if(_keyword.toLowerCase().replace(/^\s+|\s+$/, "") == "maxquantity") 
			{
				_end = _section[i].split("==")[1].replace(/^\s+|\s+$/, "").indexOf("//"); 
				if(_end == -1) 
					_end = _section[i].split("==")[1].replace(/^\s+|\s+$/, "").length; 
				var _quantity = parseInt(_section[i].split("==")[1].replace(/^\s+|\s+$/, "").substring(0, _end)); 
				_result[2]["MaxQuantity"] = _quantity; 
			}
			else 
			{
				print("Error in your NIP file : unknown 3rd part keyword."); 
			}
		}
	}
	
	return _result; 
}

function NTIPIsSyntaxInt(ch) 
{
	return (ch == '!' || ch == '%' || ch == '&' || (ch >= '(' && ch <= '+') || ch == '-' || ch == '/' || (ch >= ':' && ch <= '?') || ch == '|'); 
}

// prototypes

Unit.prototype.__defineGetter__('itemclass',
	function() {
		if (getBaseStat(0, this.classid, 'code') === undefined) {
			return 0;
		}
		
		if (getBaseStat(0, this.classid, 'code') === getBaseStat(0, this.classid, 'ultracode')) {
			return 2;
		} else if (getBaseStat(0, this.classid, 'code') === getBaseStat(0, this.classid, 'ubercode')) {
			return 1;
		} else {
			return 0;
		}
	}
);